openapi: 3.0.3
info:
  title: Eco Mobility APIs
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: user-service
  - url: http://localhost:3002
    description: car-service
  - url: http://localhost:3003
    description: booking-service
paths:
  /register:
    post:
      tags: [auth]
      summary: Register
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, properties: { email: { type: string }, password: { type: string } }, required: [email, password] } } }
      responses:
        '201': { description: Created }
  /login:
    post:
      tags: [auth]
      summary: Login
      requestBody:
        required: true
        content: { application/json: { schema: { type: object, properties: { email: { type: string }, password: { type: string } }, required: [email, password] } } }
      responses:
        '200': { description: OK }
  /cars:
    get:
      tags: [cars]
      summary: List cars
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: available
          schema: { type: boolean }
        - in: query
          name: make
          schema: { type: string }
        - in: query
          name: model
          schema: { type: string }
      responses:
        '200': { description: OK }
    post:
      tags: [cars]
      summary: Create car (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/Car' } } }
      responses:
        '201': { description: Created }
  /bookings:
    get:
      tags: [bookings]
      summary: List my bookings
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
    post:
      tags: [bookings]
      summary: Create booking
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: '#/components/schemas/BookingCreate' } } }
      responses:
        '201': { description: Created }
  /bookings/{id}/cancel:
    put:
      tags: [bookings]
      summary: Cancel booking
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Car:
      type: object
      properties:
        make: { type: string }
        model: { type: string }
        year: { type: integer }
        available: { type: boolean }
        dailyPrice: { type: number }
      required: [make, model, year]
    BookingCreate:
      type: object
      properties:
        carId: { type: string }
        startDate: { type: string, format: date-time }
        endDate: { type: string, format: date-time }
      required: [carId, startDate, endDate]
